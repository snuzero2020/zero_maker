#!/usr/bin/env python
from string import Template
import numpy as np
import rospy
from geometry_msgs.msg import Pose, Point, Quaternion
from gazebo_msgs.srv import SpawnModel, SpawnModelRequest
from gazebo_msgs.srv import DeleteModel, DeleteModelRequest
from tf.transformations import quaternion_from_euler
import math
import random 

_obj_sdf = """\
<?xml version='1.0'?>
<sdf version="1.4">
<model name=$model_name>
  <static>true</static>
    <link name="link">
      <visual name="visual">
        <geometry>$obj_shape</geometry>
        <material>
          <script>
            <name>$material_color</name>
          </script>
        </material>
      </visual>
    </link>
  </model>
</sdf>
"""

_shape_list = {'car_wheel': Template("<mesh><uri>model://car_wheel/meshes/car_wheel.dae</uri></mesh>"),
               'hammer': Template("<mesh><uri>model://hammer/meshes/hammer.dae</uri></mesh>"),
               'postbox': Template("<mesh><uri>model://postbox/meshes/postbox.dae</uri></mesh>"),
               'mailbox': Template("<mesh><uri>model://mailbox/meshes/mailbox.dae</uri></mesh>"),
               'vase_glass': Template("<mesh><uri>model://decoration/vase_glass/meshes/vase4.dae</uri></mesh>"),
               'desk_brown': Template("<mesh><uri>model://furniture/desk_brown/meshes/desk.dae</uri></mesh>"),
               'cafe_table': Template("<mesh><uri>model://models/cafe_table/meshes/cafe_table.dae</uri></mesh>"),
               'table_dining': Template("<mesh><uri>model://furniture/table_dining/meshes/table2.dae</uri></mesh>"),
               'file_cabinet': Template("<mesh><uri>model://furniture/file_cabinet_large/meshes/model.dae</uri></mesh>"),
               'chair_3': Template("<mesh><uri>model://furniture/chair_3/meshes/model.dae</uri></mesh>"),
               'construction_cone_small': Template("<mesh><uri>model://tools/construction_cone_small/meshes/construction_cone.dae</uri></mesh>"),
               }

_material_list = ['Gazebo/White',
                  'Gazebo/Grey',
                  'Gazebo/Eyes',
                  'Gazebo/FlatBlack',
                  'Gazebo/Black',
                  'Gazebo/Red',
                  'Gazebo/Green',
                  'Gazebo/Yellow',
                  'Gazebo/Purple',
                  'Gazebo/Turquoise',
                  'Gazebo/WhiteEmissive',
                  'Gazebo/RedEmissive',
                  'Gazebo/GreenEmissive',
                  'Gazebo/PurpleEmissive',
                  'Gazebo/BlueLaser',
                  'Gazebo/BlueEmissive',
                  'Gazebo/JointAnchor',
                  'Gazebo/Blue',
                  'Gazebo/Skull',
                  'Gazebo/ExclamationPoint',
                  'Gazebo/QuestionMark',
                  'Gazebo/SmileyHappy',
                  'Gazebo/SmileySad',
                  'Gazebo/SmileyDead',
                  'Gazebo/SmileyPlain',
                  'Gazebo/WoodFloor',
                  'Gazebo/CeilingTiled',
                  'Gazebo/PaintedWall',
                  'Gazebo/PioneerBody',
                  'Gazebo/Pioneer2Body',
                  'Gazebo/Gold',
                  'Gazebo/CloudySky',
                  'Gazebo/RustySteel',
                  'Gazebo/Chrome',
                  'Gazebo/BumpyMetal',
                  'Gazebo/GrayGrid',
                  'Gazebo/Rocky',
                  'Gazebo/GrassFloor',
                  'Gazebo/Rockwall',
                  'Gazebo/RustyBarrel',
                  'Gazebo/WoodPallet',
                  'Gazebo/Fish',
                  'Gazebo/LightWood',
                  'Gazebo/WoodTile',
                  'Gazebo/Brick',
                  'Gazebo/RedTransparent',
                  'Gazebo/GreenTransparent',
                  'Gazebo/BlueTransparent',
				  'Gazebo/DepthMap',
                  'Gazebo/PCBGreen',
                  'Gazebo/Turret',
                  'Gazebo/EpuckBody',
                  'Gazebo/EpuckRing',
                  'Gazebo/EpuckPlate',
                  'Gazebo/EpuckLogo',
                  'Gazebo/EpuckMagenta',
                  'Gazebo/EpuckGold']


class Spawner:
	def __init__(self, gazebo_ns = '/gazebo'):
		self._sdf_temp = Template(_obj_sdf)
		self._spawn_model = rospy.ServiceProxy(gazebo_ns + '/spawn_sdf_model', SpawnModel)
		self.model_nums = rospy.get_param("/num_of_objs")
		self._obj_names = ['obj' + str(i+1) for i in range(self.model_nums)]
		self._spawned = [0,0,0]

	def callback(self):
		req = SpawnModelRequest()
		for i in range(self.model_nums):
			if(self._spawned[i] == 0):
				shape_no = rospy.get_param("/" + self._obj_names[i] + "_spec_num")
				x = rospy.get_param("/" + self._obj_names[i] + "_x")
				y = rospy.get_param("/" + self._obj_names[i] + "_y")
				z = rospy.get_param("/" + self._obj_names[i] + "_z")
				roll = rospy.get_param("/" + self._obj_names[i] + "_roll")
				pitch = rospy.get_param("/" + self._obj_names[i] + "_pitch")
				yaw = rospy.get_param("/" + self._obj_names[i] + "_yaw")

				print(x)
				print(y)
				print(z)
				print(roll)
				print(pitch)
				print(yaw)
		
				if shape_no == 0:
					shape_sdf = _shape_list['car_wheel'].substitute()
				elif shape_no == 1:
					shape_sdf = _shape_list['hammer'].substitute()
				elif shape_no == 2:
					shape_sdf = _shape_list['postbox'].substitute()
				elif shape_no == 3:
					shape_sdf = _shape_list['mailbox'].substitute()
				elif shape_no == 4:
					shape_sdf = _shape_list['vase_glass'].substitute()
				elif shape_no == 5:
					shape_sdf = _shape_list['table_dining'].substitute()
				elif shape_no == 6:
					shape_sdf = _shape_list['desk_brown'].substitute()
				elif shape_no == 7:
					shape_sdf = _shape_list['file_cabinet'].substitute()
				elif shape_no == 8:
					shape_sdf = _shape_list['chair_3'].substitute()
				elif shape_no == 9:
					shape_sdf = _shape_list['construction_cone_small'].substitute()
				else:
					shape_sdf = _shape_list['cafe_table'].substitute()
	
				req.model_xml = self._sdf_temp.substitute(model_name = self._obj_names[i],
														  obj_shape = shape_sdf,
														  material_color = np.random.choice(_material_list))
				r = roll
				p = pitch
				y = yaw
				q = quaternion_from_euler(r, p, y)
	
				req.initial_pose = Pose(position = Point(x, y, z), orientation = Quaternion(q[0], q[1], q[2], q[3]))
				rospy.logdebug("Spawn model sdf: " + req.model_xml)
	
				try:
					res = self._spawn_model(req)
					if not res.success:
						rospy.logwarn(res.status_message)
					else:
						self._spawned[i] = 1
						print("successfully spawned "+ str(i) + "th obj")

				except:
					pass

				print(self._spawned)
			
if __name__ == "__main__":
	import argparse
	from std_msgs.msg import Empty
	parser = argparse.ArgumentParser(description = 'spawner')
	parser.add_argument('-d', '--duration', type=float, default=1.0, help='Timer duration.')
	parser.add_argument('--gazebo_ns', type=str, default='/gazebo', help='Gazebo namespace.')
	parser.add_argument('-e', '--event_mode', type=str, default='timer', choices=['timer', 'trigger'], help='Timer duration.')
	args = parser.parse_args(rospy.myargv()[1:])

	rospy.init_node("spawner")
	spawner = Spawner(gazebo_ns = args.gazebo_ns)

	checker = 0
	for i in range(3):
		if(spawner._spawned[i] == 0):
			checker = 1
			break

	print(checker)

	if(checker == 1):
		spawner.callback()
		rospy.spin()
