#!/usr/bin/env python
from string import Template
import numpy as np
import rospy
from geometry_msgs.msg import Pose, Point, Quaternion
from std_msgs.msg import Int32
from gazebo_msgs.srv import SpawnModel, SpawnModelRequest
from gazebo_msgs.srv import DeleteModel, DeleteModelRequest
from tf.transformations import quaternion_from_euler
import math
import random
import time


PI = math.pi

_obj_sdf = """\
<?xml version="1.0" ?>
<sdf version="1.5">
  <model name="turtlebot3_burger">  

    <link name="base">
<gravity>0</gravity>
      
      <collision name="base_collision">
        <pose>-0.032 0 0.070 0 0 0</pose>
        <geometry>
          <box>
            <size>0.140 0.140 0.140</size>
          </box>
        </geometry>
      </collision>

      <visual name="base_visual">
        <pose>-0.032 0 0 0 0 0</pose>
        <geometry>
          <mesh>
            <uri>model://turtlebot3_burger/meshes/burger_base.dae</uri>
            <scale>0.001 0.001 0.001</scale>
          </mesh>
        </geometry>
      </visual>

      <collision name="caster_collision">
        <pose>-0.081 0 -0.004 0 0 0</pose>
        <geometry>
          <sphere>
            <radius>0.005000</radius>
          </sphere>
        </geometry>
        <surface>
          <friction>
            <ode>
              <mu>100000.0</mu>
              <mu2>100000.0</mu2>
              <fdir1>0 0 0</fdir1>
              <slip1>0</slip1>
              <slip2>0</slip2>
            </ode>
          </friction>
        </surface>
      </collision>
    </link>

  <link name="lidar">
    <gravity>0</gravity>
    <collision name="lidar_sensor_collision">
        <pose>-0.020 0 0.161 0 0 0</pose>
        <geometry>
          <cylinder>
            <radius>0.0508</radius>
            <length>0.055</length>
          </cylinder>
        </geometry>
      </collision>

      <visual name="lidar_sensor_visual">
        <pose>-0.032 0 0.171 0 0 0</pose>
        <geometry>
          <mesh>
            <uri>model://turtlebot3_burger/meshes/lds.dae</uri>
            <scale>0.001 0.001 0.001</scale>
          </mesh>
        </geometry>
      </visual>

      <sensor name="hls_lfcd_lds" type="ray">
        <always_on>1</always_on>
        <visualize>0</visualize>
        <pose>-0.032 0 0.171 0 0 0</pose>
        <update_rate>1800</update_rate>
        <ray>
          <scan>
            <horizontal>
              <samples>360</samples>
              <resolution>1.000000</resolution>
              <min_angle>0.000000</min_angle>
              <max_angle>6.280000</max_angle>
            </horizontal>
          </scan>
          <range>
            <min>0.120000</min>
            <max>3.5</max>
            <resolution>0.015000</resolution>
          </range>
          <noise>
            <type>gaussian</type>
            <mean>0.0</mean>
            <stddev>0.01</stddev>
          </noise>
        </ray>
      </sensor>
    </link>

    <link name="left_wheel">
<gravity>0</gravity>

      <collision name="left_wheel_collision">
        <pose>0 0.08 0.023 -1.57 0 0</pose>
        <geometry>
          <cylinder>
            <radius>0.033</radius>
            <length>0.018</length>
          </cylinder>
        </geometry>
          <surface>
          <!-- This friction pamareter don't contain reliable data!! -->
            <friction>
              <ode>
                <mu>100000.0</mu>
                <mu2>100000.0</mu2>
                <fdir1>0 0 0</fdir1>
                <slip1>0.0</slip1>
                <slip2>0.0</slip2>
              </ode>
          </friction>
        </surface>
      </collision>

      <visual name="left_wheel_visual">
        <pose>0 0.08 0.023 0 0 0</pose>
        <geometry>
          <mesh>
            <uri>model://turtlebot3_burger/meshes/left_tire.dae</uri>
            <scale>0.001 0.001 0.001</scale>
          </mesh>
        </geometry>
      </visual>
    </link>

    <link name="right_wheel">
<gravity>0</gravity>
    
      <collision name="right_wheel_collision">
        <pose>0.0 -0.08 0.023 -1.57 0 0</pose>
        <geometry>
          <cylinder>
            <radius>0.033</radius>
            <length>0.018</length>
          </cylinder>
        </geometry>
          <surface>
          <!-- This friction pamareter don't contain reliable data!! -->
            <friction>
              <ode>
                <mu>100000.0</mu>
                <mu2>100000.0</mu2>
                <fdir1>0 0 0</fdir1>
                <slip1>0.0</slip1>
                <slip2>0.0</slip2>
              </ode>
          </friction>
        </surface>
      </collision>

      <visual name="right_wheel_visual">
        <pose>0.0 -0.08 0.023 0 0 0</pose>
        <geometry>
          <mesh>
            <uri>model://turtlebot3_burger/meshes/right_tire.dae</uri>
            <scale>0.001 0.001 0.001</scale>
          </mesh>
        </geometry>
      </visual>
    </link>

    <joint name="left_wheel_joint" type="revolute">
      <parent>base</parent>
      <child>left_wheel</child>
      <pose>0.0 0.08 0.023 -1.57 0 0</pose>
      <axis>
        <xyz>0 1 0</xyz>
      </axis>
    </joint>

    <joint name="right_wheel_joint" type="revolute">
      <parent>base</parent>
      <child>right_wheel</child>
      <pose>0.0 -0.08 0.023 -1.57 0 0</pose>
      <axis>
        <xyz>0 1 0</xyz>
      </axis>
    </joint>

    <joint name="lidar_joint" type="fixed">
      <parent>base</parent>
      <child>lidar</child>
      <pose>-0.032 0 0.171 0 0 0</pose>
      <axis>
        <xyz>0 0 1</xyz>
        <use_parent_model_frame>true</use_parent_model_frame>
      </axis>
    </joint>
  </model>
</sdf>
"""

_target_list = {'turtlebot_burger': Template("<mesh><uri>model://turtlebot3_burger/meshes/turtlelbot3_burger.dae</uri></mesh>")}
class TargetRandomizer:
    def __init__(self, position_range, orientation_range, size_range=[0.1, 0.5],
                 max_num_model=5,
                 gazebo_ns='/gazebo'):
        self._sdf_temp = Template(_obj_sdf)
        self._spawn_model = rospy.ServiceProxy(gazebo_ns + '/spawn_sdf_model', SpawnModel)
        self._delete_model = rospy.ServiceProxy(gazebo_ns + '/delete_model', DeleteModel)
        self._tar_names = ['tar' + str(i) for i in range(max_num_model)]
        self._spawned_objs = set()
        self._size_range = size_range
        self._position_range = position_range
        self._orientation_range = orientation_range
        self._pub_sign = rospy.Publisher("/collection_sign", Int32 , queue_size = 1)
        self._index = 0

    def callback(self, event):
        rospy.loginfo(self._spawned_objs)
        self._index = self._index + 1
        for obj_name in self._spawned_objs:
            try:
                self._delete_model(DeleteModelRequest(obj_name))
            except:
                pass
        rospy.sleep(2)
        self._spawned_objs = set()
        target_no = 1
        for i in range(target_no):
            req=SpawnModelRequest()
            obj_type = 'turtlebot3_burger'
            obj_name = 'tar' + str(i) + '_' + obj_type
            req.model_name=obj_name
            ##shape_sdf = _target_list[obj_type].substitute()
            ##req.model_xml = self._sdf_temp.substitute(model_name=obj_name,
            ##                                          obj_shape=shape_sdf)
            
            req.model_xml = self._sdf_temp.substitute()
            r = random.uniform(self._orientation_range['r']['min'], self._orientation_range['r']['max'])
            p = random.uniform(self._orientation_range['p']['min'], self._orientation_range['p']['max'])
            y = random.uniform(self._orientation_range['y']['min'], self._orientation_range['y']['max'])
            q = quaternion_from_euler(r,p,y)
            req.initial_pose = Pose(position=Point(*np.random.uniform([self._position_range['x']['min'],
                                                                       self._position_range['y']['min'],
                                                                       self._position_range['z']['min']],
                                                                      [self._position_range['x']['max'],
                                                                       self._position_range['y']['max'],
                                                                       self._position_range['z']['max']])),
                                                                       orientation=Quaternion(q[0],q[1],q[2],q[3]))
            
            #q = quaternion_from_euler(PI/2,0,0)
            #req.initial_pose = Pose(position= Point(0,0,3.5), orientation=Quaternion(q[0],q[1],q[2],q[3]))
            #req.initial_pose = Pose(position=Point(0,0,0))
            rospy.logdebug("Spawn model sdf: "+req.model_xml)
            try:
                res = self._spawn_model(req)
                if not res.success:
                    rospy.logwarn(res.status_message)
                else:
                    self._spawned_objs.add(obj_name)
            except:
                #rospy.logerr("Service call failed: %s" %e)
                pass
        rospy.sleep(3)
        self._pub_sign.publish(self._index)
        

if __name__ == "__main__":
    import argparse
    from std_msgs.msg import Empty
    parser = argparse.ArgumentParser(description='Target randomizer')
    parser.add_argument('-d', '--duration', type=float, default=20.0, help='Timer duration.')
    parser.add_argument('--gazebo_ns', type=str, default='/gazebo', help='Gazebo namespace.')
    parser.add_argument('-e', '--event_mode', type=str, default='timer', choices=['timer', 'trigger'], help='Timer duration.')
    args = parser.parse_args(rospy.myargv()[1:])

    rospy.init_node("targets_randomizer")
    position_range = {}
    orientation_range = {}
    position_range['x'] = rospy.get_param("~position_range/x", {'min': -0.105, 'max': 0.105})
    position_range['y'] = rospy.get_param("~position_range/y", {'min': -0.14, 'max': 0.14})
    position_range['z'] = rospy.get_param("~position_range/z", {'min': 3.0, 'max': 3.5})
    orientation_range['r'] = rospy.get_param("~orientation_range/r", {'min': -PI, 'max': PI})
    orientation_range['p'] = rospy.get_param("~orientation_range/p", {'min': -PI, 'max': PI})
    orientation_range['y'] = rospy.get_param("~orientation_range/y", {'min': -PI, 'max': PI})
    randomizer = TargetRandomizer(position_range, orientation_range, gazebo_ns=args.gazebo_ns)
    if args.event_mode == 'timer':
        rospy.Timer(rospy.Duration(args.duration), randomizer.callback)
    elif args.event_mode == 'trigger':
        rospy.Subscriber('randomizer/trigger', Empty, randomizer.callback)
    else:
        raise ValueError('Unknown event_mode: %s' % args.event_mode)
    rospy.spin()
