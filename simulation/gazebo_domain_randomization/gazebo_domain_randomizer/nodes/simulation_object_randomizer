#!/usr/bin/env python
from string import Template
import numpy as np
import rospy
from geometry_msgs.msg import Pose, Point, Quaternion
from gazebo_msgs.srv import SpawnModel, SpawnModelRequest
from gazebo_msgs.srv import DeleteModel, DeleteModelRequest
from tf.transformations import quaternion_from_euler
import math
import random

PI = math.pi

_obj_sdf = """\
<?xml version='1.0'?>
<sdf version="1.4">
<model name=$model_name>
  <static>true</static>
    <link name="link">
      <visual name="visual">
        <geometry>$obj_shape</geometry>
        <material>
          <script>
            <name>$material_color</name>
          </script>
        </material>
      </visual>
    </link>
  </model>
</sdf>
"""

_shape_list = {'cafe_table': Template("<mesh><uri>model://cafe_table/meshes/cafe_table.dae</uri></mesh>"),
               'box': Template("<box><size>$sx $sy $sz</size></box>"),
               'cylinder': Template("<cylinder><radius>$cr</radius><length>$cl</length></cylinder>"),
               'sphere': Template("<sphere><radius>$sr</radius></sphere>")}

_material_list = ['Gazebo/White',
                  'Gazebo/Grey',
                  'Gazebo/Eyes',
                  'Gazebo/FlatBlack',
                  'Gazebo/Black',
                  'Gazebo/Red',
                  'Gazebo/Green',
                  'Gazebo/Yellow',
                  'Gazebo/Purple',
                  'Gazebo/Turquoise',
                  'Gazebo/WhiteEmissive',
                  'Gazebo/RedEmissive',
                  'Gazebo/GreenEmissive',
                  'Gazebo/PurpleEmissive',
                  'Gazebo/BlueLaser',
                  'Gazebo/BlueEmissive',
                  'Gazebo/JointAnchor',
                  'Gazebo/Blue',
                  'Gazebo/Skull',
                  'Gazebo/ExclamationPoint',
                  'Gazebo/QuestionMark',
                  'Gazebo/SmileyHappy',
                  'Gazebo/SmileySad',
                  'Gazebo/SmileyDead',
                  'Gazebo/SmileyPlain',
                  'Gazebo/WoodFloor',
                  'Gazebo/CeilingTiled',
                  'Gazebo/PaintedWall',
                  'Gazebo/PioneerBody',
                  'Gazebo/Pioneer2Body',
                  'Gazebo/Gold',
                  'Gazebo/CloudySky',
                  'Gazebo/RustySteel',
                  'Gazebo/Chrome',
                  'Gazebo/BumpyMetal',
                  'Gazebo/GrayGrid',
                  'Gazebo/Rocky',
                  'Gazebo/GrassFloor',
                  'Gazebo/Rockwall',
                  'Gazebo/RustyBarrel',
                  'Gazebo/WoodPallet',
                  'Gazebo/Fish',
                  'Gazebo/LightWood',
                  'Gazebo/WoodTile',
                  'Gazebo/Brick',
                  'Gazebo/RedTransparent',
                  'Gazebo/GreenTransparent',
                  'Gazebo/BlueTransparent',
                  'Gazebo/DepthMap',
                  'Gazebo/PCBGreen',
                  'Gazebo/Turret',
                  'Gazebo/EpuckBody',
                  'Gazebo/EpuckRing',
                  'Gazebo/EpuckPlate',
                  'Gazebo/EpuckLogo',
                  'Gazebo/EpuckMagenta',
                  'Gazebo/EpuckGold']

class ShapesRandomizer:
    def __init__(self, position_range, orientation_range, size_range=[0.1, 0.5],
                 max_num_model=15,
                 gazebo_ns='/gazebo'):
        self._sdf_temp = Template(_obj_sdf)
        self._spawn_model = rospy.ServiceProxy(gazebo_ns + '/spawn_sdf_model', SpawnModel)
        self._delete_model = rospy.ServiceProxy(gazebo_ns + '/delete_model', DeleteModel)
        self._obj_names = ['obj' + str(i) for i in range(max_num_model)]
        self._spawned_objs = set()
        self._size_range = size_range
        self._position_range = position_range
        self._orientation_range = orientation_range

    def callback(self, event):
        req = SpawnModelRequest()
        obj_name = np.random.choice(self._obj_names)
        req.model_name = obj_name
        if obj_name in self._spawned_objs:
            try:
                self._delete_model(DeleteModelRequest(obj_name))
            except rospy.ServiceException, e:
                pass            
        rospy.sleep(0.2)
        shape_no = np.random.choice(4)
        h = 0.0
        if shape_no == 0:
            shape_sdf = _shape_list['cafe_table'].substitute()
        elif shape_no == 1:
            sx = np.random.uniform(*self._size_range)
            sy = np.random.uniform(*self._size_range)
            sz = np.random.uniform(*self._size_range)
            h = sz/2.0
            shape_sdf = _shape_list['box'].substitute(sx=str(sx), sy=str(sy), sz=str(sz))
        elif shape_no == 2:
            cr = np.random.uniform(*self._size_range)
            cl = np.random.uniform(*self._size_range)
            h = cl/2.0
            shape_sdf = _shape_list['cylinder'].substitute(cr=str(cr), cl=str(cl))
        elif shape_no == 3:
            sr = np.random.uniform(*self._size_range)
            h = sr
            shape_sdf = _shape_list['sphere'].substitute(sr=str(sr))
        
        req.model_xml = self._sdf_temp.substitute(model_name=obj_name,
                                                  obj_shape=shape_sdf,
                                                  material_color=np.random.choice(_material_list))
        r = 0.0
        p = 0.0
        y = random.uniform(self._orientation_range['y']['min'], self._orientation_range['y']['max'])
        q = quaternion_from_euler(r,p,y)
        a = random.uniform(self._position_range['x']['min'], self._position_range['x']['max'])
        b = random.uniform(self._position_range['y']['min'], self._position_range['y']['max'])
        
        req.initial_pose = Pose(position=Point(a,b,h), orientation=Quaternion(q[0],q[1],q[2],q[3]))
        rospy.logdebug("Spawn model sdf: " + req.model_xml)
        try:
            res = self._spawn_model(req)
            if not res.success:
                rospy.logwarn(res.status_message)
            else:
                self._spawned_objs.add(obj_name)
        except:
            #rospy.logerr("Service call failed: %s" % e)
            pass
        rospy.sleep(0.2)

if __name__ == "__main__":
    import argparse
    from std_msgs.msg import Empty
    parser = argparse.ArgumentParser(description='Shape randomizer')
    parser.add_argument('-d', '--duration', type=float, default=1.0, help='Timer duration.')
    parser.add_argument('--gazebo_ns', type=str, default='/gazebo', help='Gazebo namespace.')
    parser.add_argument('-e', '--event_mode', type=str, default='timer', choices=['timer', 'trigger'], help='Timer duration.')
    args = parser.parse_args(rospy.myargv()[1:])

    rospy.init_node("shapes_randomizer")
    position_range = {}
    orientation_range = {}
    position_range['x'] = rospy.get_param("~position_range/x", {'min': -1.5, 'max': 0.0})
    position_range['y'] = rospy.get_param("~position_range/y", {'min': -2.0, 'max': 2.0})
    position_range['z'] = rospy.get_param("~position_range/z", {'min': 1.0, 'max': 1.5})
    orientation_range['r'] = rospy.get_param("~orientation_range/r", {'min': -PI, 'max': PI})
    orientation_range['p'] = rospy.get_param("~orientation_range/p", {'min': -PI, 'max': PI})
    orientation_range['y'] = rospy.get_param("~orientation_range/y", {'min': -PI, 'max': PI})
    randomizer = ShapesRandomizer(position_range, orientation_range, gazebo_ns=args.gazebo_ns)
    if args.event_mode == 'timer':
        rospy.Timer(rospy.Duration(args.duration), randomizer.callback)
    elif args.event_mode == 'trigger':
        rospy.Subscriber('randomizer/trigger', Empty, randomizer.callback)
    else:
        raise ValueError('Unknown event_mode: %s' % args.event_mode)
    rospy.spin()
