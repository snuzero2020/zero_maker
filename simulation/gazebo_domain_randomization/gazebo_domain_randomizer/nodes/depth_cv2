#!/usr/bin/env python
import roslib
#roslib.load_manifest('kinect_pylistener')
import sys
import rospy
import cv2
import os
from std_msgs.msg import String
from sensor_msgs.msg import Image
from sensor_msgs.msg import PointCloud2
import sensor_msgs.point_cloud2 as pc2
from struct import pack, unpack
from matplotlib import pyplot as pyplot
from mpl_toolkits.mplot3d import Axes3D
from cv_bridge import CvBridge, CvBridgeError
import time
import numpy as np
import message_filters
i=1
threshold = 6.9
im_size = 960*720
class image_converter:

  def __init__(self):
    self.bridge = CvBridge()
    image_sub = message_filters.Subscriber("/camera/color/image_raw", Image)
    depth_sub = message_filters.Subscriber("/camera/depth/image_raw", Image)
    PC2 = message_filters.Subscriber("/camera/depth/points", PointCloud2)
    self.ts = message_filters.ApproximateTimeSynchronizer([image_sub, depth_sub,PC2], 1, 1,  allow_headerless=True)
    self.ts.registerCallback(self.callback)
    print "test2"

  def callback(self,rgb_data, depth_data, PC2):
    global i, threshold, im_size
    try:
      image = self.bridge.imgmsg_to_cv2(rgb_data, "bgr8")
      depth_image = self.bridge.imgmsg_to_cv2(depth_data, "passthrough")
      depth_array = np.array(depth_image, dtype=np.float32)
      color_array = np.array(image, dtype=np.uint8)
      depth_array[np.isnan(depth_array)] = 0
      cv2.normalize(depth_array, depth_array, 0, 1, cv2.NORM_MINMAX)
      print "depth_array"
      print np.max(depth_array)
      print np.min(depth_array)
      print np.nanmax(depth_array)
      print np.nanmin(depth_array)
      depth_list = depth_array.tolist()
      label = np.zeros((len(depth_list), len(depth_list[0])))
      for j in range(len(depth_list)):
        for k in range(len(depth_list[0])):
          if (depth_list[j][k] < 0.99):
            label[j][k] = 1
      l = np.array(label)
      rospy.loginfo(image.shape)
      '''cv2.imwrite('/home/parallels/catkin_ws/src/gazebo_domain_randomization-master/tr_data/img/color/'+str(i)+'camera_rgb.jpg', color_array)
      cv2.imwrite('/home/parallels/catkin_ws/src/gazebo_domain_randomization-master/tr_data/img/depth/'+str(i)+'camera_depth.pgm', depth_array*255)
      cv2.imwrite('/home/parallels/catkin_ws/src/gazebo_domain_randomization-master/tr_data/img/label_img/'+str(i)+'label_img.pgm', l*255)
      np.savetxt('/home/parallels/catkin_ws/src/gazebo_domain_randomization-master/tr_data/array/arr/'+str(i)+'depth_array.txt', depth_array, delimiter = ',')
      np.savetxt('/home/parallels/catkin_ws/src/gazebo_domain_randomization-master/tr_data/array/label/'+str(i)+'label_array.txt', l, delimiter=',')
      '''
      p=[0]*im_size
      X=[]
      Y=[]
      Z=[]
      C=[]
      if i%5==0:
        cv2.imwrite('/home/jeongwoooh/catkin_ws/src/gazebo_turtlebot_randomizer/data/'+'camera_rgb_'+str(i/5).zfill(5)+'.jpg', color_array)
        #cv2.imwrite('/home/parallels/catkin_ws/src/gazebo_domain_randomization-master/tr_data/img/depth/'+str(i/5)+'camera_depth.pgm', depth_array*255)
        #cv2.imwrite('/home/parallels/catkin_ws/src/gazebo_domain_randomization-master/tr_data/img/label_img/'+str(i/5)+'label_img.pgm', l*255)
        #np.savetxt('/home/parallels/catkin_ws/src/gazebo_domain_randomization-master/tr_data/array/arr/'+str(i/5)+'depth_array.txt', depth_array, delimiter = ',')
        #np.savetxt('/home/parallels/catkin_ws/src/gazebo_domain_randomization-master/tr_data/array/label/'+str(i/5)+'label_array.txt', l, delimiter=',')
        j=0
        for point in pc2.read_points(PC2, field_names={'x','y','z','rgb'}, skip_nans=True):
          rgb = pack('f', point[3])
          rgb = unpack('i', rgb)[0]
          r = (rgb>>16)&0x0000ff
          g = (rgb>>8) & 0x0000ff
          b = (rgb) & 0x0000ff
          #print(point[0], point[1], point[2],(rgb>>16)&0x0000ff, (rgb>>8)&0x0000ff, (rgb)&0x0000ff) #r,g,b
          if ((-0.5<point[2]) and (point[2] < 8)):
            X.append(point[0])
            Y.append(point[1])
            Z.append(point[2])
            C.append([r,g,b])
            if (point[2] > threshold):
              p[j] = 1
              j += 1
            else:
              j += 1


        point_label = np.reshape(p, (-1,960))

        pl = np.array(point_label)
        #np.savetxt('/home/parallels/catkin_ws/src/gazebo_domain_randomization-master/tr_data/array/point_label/'+str(i/5)+'point_label_array.txt', pl, delimiter = ',')
        cv2.imwrite('/home/jeongwoooh/catkin_ws/src/gazebo_turtlebot_randomizer/data/'+'point_label_img_'+str(i/5).zfill(5)+'.pgm', pl*255)
      print "test3"
      i += 1
    except CvBridgeError as e:
      print(e)



def main(args):
  print "test1"
  ic = image_converter()
  rospy.init_node('image_converter', anonymous=True)
  while not rospy.is_shutdown():
    try:
      rospy.sleep(50)
    except KeyboardInterrupt:
      print("Shutting down")
    cv2.destroyAllWindows()

if __name__ == '__main__':
    main(sys.argv)
